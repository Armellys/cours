package sgbd.test;

import sgbd.stockage.*;
import sgbd.impl.*;

public class Main {
	
	public static final int datasetSize = 100;
	public static final int nupletSize = 10;

	public static void main(String[] args){
		
		// Génération des données
		Nuplet[] tab = new NupletInt[datasetSize];
		for(int i=0;i<datasetSize;i++){
			tab[i] = new NupletInt(nupletSize);
			for(int j=0;j<nupletSize;j++){
				tab[i].putAtt(j, (byte)(j+i));
			}
		}

		// Implémentation avec Table
		
		System.out.println("------------------------------------------------");	
		System.out.println("Création d'une table");
		Table t = new TableInt("/tmp/table2", nupletSize);
		for(int i=0;i<datasetSize;i++){
			t.put(tab[i]);
			}
		System.out.println("Lecture d'une table");
		for(int i=0;i<datasetSize;i++){
			System.out.println(t.get(i).toString());
			}
		
		// Utilisation de getByAtt
		System.out.println("Test GetByAtt");
		Nuplet[] res = t.getByAtt(4, (byte)50);//renvoie les nuplets qui ont la valeur 50 au 4ème enregistrement
		for(Nuplet n : res){
			System.out.println(n.toString());
		}
		
		System.out.println("Test full Scan");
		Nuplet[] resScan = t.fullScan();//scan toute la table de donnée
		for(Nuplet n : resScan)
			System.out.println(n.toString());
		
		System.out.println("Test del");
		t.delete(4, (byte)50);//supprime le 1er nuplet qui a la valeur 50 au 4ème enregistrement
		Nuplet[] resScan2 = t.fullScan();//scan toute la table de donnée
		for(Nuplet n : resScan2)
			System.out.println(n.toString());
		
		System.out.println("Test update");
		t.update(0, (byte)96,(byte)17);
		Nuplet[] resSca = t.fullScan();//scan toute la table de donnée
		for(Nuplet n : resSca)
			System.out.println(n.toString());
		
		
		
		RestrictionInt r = new RestrictionInt();
		System.out.println("Test Restriction égalité");
		Nuplet[] result = r.egalite(resScan, 0, (byte)23);//scan toute la table de donnée
		for(Nuplet n : result)
			System.out.println(n.toString());
		System.out.println("Test Restriction sup");
		result = r.superieur(resScan, 0, (byte)91);//scan toute la table de donnée
		for(Nuplet n : result)
			System.out.println(n.toString());
		System.out.println("Test Restriction inf");
		result = r.inferieur(resScan, 0, (byte)6);//scan toute la table de donnée
		for(Nuplet n : result)
			System.out.println(n.toString());
		
		
		ProjectionInt p = new ProjectionInt();
		System.out.println("Test Projection");
		int[] atts={0,1,7,9};
		Nuplet[] resultProj = p.project(resScan, atts);//scan toute la table de donnée
		for(Nuplet n : resultProj)
			System.out.println(n.toString());
		
		JointureInt j = new JointureInt();
		System.out.println("Test Jointure");
		result = j.jointure(resultProj, resScan, 1, 2);
		for(Nuplet n : result)
			System.out.println(n.toString());
		
		JointureH jH = new JointureH();
		System.out.println("Test JointureHash sur l'attribut 1 pour la 1ère table (resultat de la projection) et attribut 2 de la table de base");
		Nuplet[] result2 = jH.jointure(resultProj, resScan, 1, 2);
		for(Nuplet n : result2)
			System.out.println(n.toString());
	
		JointureS jS = new JointureS();
		System.out.println("Test Jointure SortMergeJoin");
		NupletInt[] t1 = new NupletInt[5];
		byte[] b = {3,4,5};
		t1[0] = new NupletInt(b);
		byte[] b1={0,7,6};
		t1[1] = new NupletInt(b1);
		byte[] b2={8,2,60};
		t1[2] = new NupletInt(b2);
		byte[] b3={4,57,24};
		t1[3] = new NupletInt(b3);
		byte[] b4 = {3,8,36};
		t1[4] = new NupletInt(b4);
		System.out.println("Jointure avec la tables de base et celle ci (toutes les deux sur l'attribut 0) :");
		for(Nuplet n : t1)
			System.out.println(n.toString());
		System.out.println("Résultat");
		Nuplet[] nJS = jS.jointure(t1, resScan, 0, 0);
		for(Nuplet n : nJS)
			System.out.println(n.toString());
		
		
		}

	}

